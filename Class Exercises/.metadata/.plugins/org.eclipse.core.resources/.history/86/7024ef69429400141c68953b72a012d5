package parkingHomeworkExercise;

import java.util.*;

public class ParkingWithCollections {

	/*private Transport[] Veichles = new Transport[5]; // Will include all veichle
														// types.
*/	
	//The creation of a new Transport array is not a List and is as follows:
	private List <Transport> Transport;
	
	private int currentNum = 0; // Will include current number of veichles in
								// the parking lot.

	private static ParkingWithCollections parking = new ParkingWithCollections();

	//
	// Constructors
	//
	
	/*
	 * A private Constructor prevents any other class from instantiating.
	 */
	private ParkingWithCollections() {
	}

	/* Static 'instance' method */
	public static ParkingWithCollections getParking() {
		return parking;
	}

	//
	// Methods
	//

	/*// Insert a veichle to the parking.
	public void insertVeichle(Transport T) {

		for (int i = currentNum; i < Veichles.length; i++) {
			if (Veichles[i] == null) {
				Veichles[i] = T;
				currentNum++;
				System.out.println(Veichles[i]);
				break;
			} else {
				System.out
						.println("----There is no room for more veichles in the Parking----");
			}

		}
	}*/
	//insertVeichle can now be done using Transport.add cause Transport is now a list.
	for (Object o : Transport)
	{
		Transport.add(Transport);
	}

	// Take out a veichle from the parking according to parking number given.
	public void removeVeichle(int parkingNumber) {
		if (Veichles[parkingNumber] == null) {
			System.out
					.println("There is no veichle parking on this parking number.");
		} else {
			Veichles[parkingNumber] = null;
			currentNum--;
		}
	}

	// Search a veichle by color and return the first one found.
	public Transport searchVeichleByColor(String Color) {
		Transport foundVeichle = null;
		for (int i = 0; i < Veichles.length; i++) {
			if (Veichles[i] != null && (Veichles[i].getColor() == Color)) {
				foundVeichle = Veichles[i];
				break;
			}
		}
		return foundVeichle;
	}

	// Count and return how many veichles there are in the parking. Veichles
	// with more than 2 wheels.
	public int countVeichlesWithMoreThan2Wheels() {
		int numOfVeichles = 0;
		for (int i = 0; i < Veichles.length; i++) {
			if (Veichles[i] instanceof Veichle) // Its enough to check if
												// Veichles[i] is an instanceof
												// Veichle since only Bike does
												// not inherit from Veichle.
			{
				numOfVeichles++;
			}
		}
		return numOfVeichles;
	}

	// Count and return how many Cars there are in the parking (Veichles
	// instanceof Car).
	public int countCars() {
		int numOfCars = 0;
		for (int i = 0; i < Veichles.length; i++) {
			if (Veichles[i] instanceof Car) // Check if Veichles[i] is an
											// instance of a Car.
			{
				numOfCars++;
			}
		}
		return numOfCars;
	}

	// Count and return num of Trucks of a certain color and weight.
	public int countTrucksOfColorAndWeight(String Color, int minWeight,
			int maxWeight) throws IllegalArgumentException{
		int numOfTrucks = 0;
		
		if (maxWeight < minWeight)
		{
			throw new IllegalArgumentException();
		}

		for (int i = 0; i < this.Veichles.length; i++) 
		{
			if (Veichles[i] instanceof Truck
					&& this.Veichles[i].getColor() == Color) 
			{
				Truck tempTruck = (Truck) Veichles[i]; // Downcasting Veichle to Truck to use getWeight method.
				if (tempTruck.getWeight() >= minWeight
						&& tempTruck.getWeight() <= maxWeight) // Check if
																// Veichles[i]
																// is a Truck of
																// a certain
																// Color and
																// Weight.
					{
					numOfTrucks++;
					}
				}	
			}
		return numOfTrucks;
	}

	// Count and return num of Bikes with number of gears between Gear1 and
	// Gear2.
	public int countBikeWithGear(int Gear1, int Gear2) {
		int numOfBikes = 0;

		for (int i = 0; i < Veichles.length; i++) {
			if (Veichles[i] instanceof Bike) {
				Bike tempBike = (Bike) Veichles[i]; // Downcasting Veichle to
													// Bike to be able to use
													// getGear method.
				if (tempBike.getGear() >= Gear1 && tempBike.getGear() <= Gear2) // Check
																				// if
																				// Veichles[i]
																				// is
																				// a
																				// Bike
																				// with
																				// a
																				// gear
																				// between
																				// Gear1
																				// and
																				// Gear2.
				{
					numOfBikes++;
				}
			}
		}
		return numOfBikes;
	}

	// Search all veichles with defined speed and return all of them.
	public Transport[] searchAndReturnVeichlesBySpeed(int max_velocity) {
		Transport[] veichlesBySpeed = new Transport[Veichles.length];
		int count = 0; // Counter for the veichlesBySpeed array increase.

		for (int i = 0; i < Veichles.length; i++) {
			if (Veichles[i] != null
					&& Veichles[i].getMaxVelocity() == max_velocity) {
				veichlesBySpeed[count] = Veichles[i];
				count++; // Increment count each time a veichle with the defined
							// speed is found.
			}
		}

		// From here on this is for shrinking the array to save memory.
		Transport[] temp = new Transport[count];
		System.arraycopy(veichlesBySpeed, 0, temp, 0, count);
		return temp;
	}

}
